Post.create!([
  {title: "The Difference Between Computers and Chemistry", body: "Is something I have contemplated a lot in the past months. As a child, I asked to get a chemistry set for Christmas, declared chemistry my major as soon as possible, and spent the last four years doing product development for a chemical start-up. Moving from the study of chemistry to the practice of chemistry, my affection began to wain. I started reading up on electronics and eventually, a little computer science. My interest in electronics and computers grew to be greater than my initial interest in chemistry. This made me begin to wonder what was different about computers that kept me coming back for more and more information every chance I got. The difference was people.\r\n\r\nPeople write software and the gods write chemistry. Chemistry is always a bit of hack and predicting the behavior of chemicals is like predicting the weather. There are trends, models, but the system under study is too complex to be completely understood. This is the case with chemistry, where theory always has to answer to experimentation.\r\n\r\nExperimentation is no walk in the park. A hypothesis can get you into the lab, but only a great deal of failures will ever lead you out. I compare the process of scientific discovery to mining gold. When mining gold, most of the effort is spent digging dirt. This process is not for the feint of heart or those less gifted in the art of long suffering.\r\n\r\nSoftware isn’t discovered, it is built, engineered, developed, and written. Studying computers and software is the study of systems designed by humans. These human authors present their own sets of challenges, but challenges in which I am excited to engage. The ability to study the designs of others is something that compels me. There's something less exciting about the the universe always being there aside from our understanding it. If everyone wakes up tomorrow having forgotten everything they ever knew about electronics, the lights would eventually go out and all the computers would be re-purposed as door-stops. Chemistry wouldn’t ever know the difference, it would keep on its merry way without us.\r\n\r\nThat's okay, Chemistry—I never loved you anyway.", author: nil, published: true, published_at: nil, pretext: "Is something I have contemplated a lot in the past months. As a child, I asked to get a chemistry set for Christmas, declared chemistry my major as soon as possible, and spent the last four years doing product development for a chemical start-up. Moving from the study..."},
  {title: "Deploy basic rails application without Capistrano", body: "I wrote an application using the  Ruby on Rails web-framework to manage this blog. I am currently enrolled in a development boot-camp, and based off of what we were covering, a barebones content management system seemed within reach. And it was. Writing he application was no sweat, but getting it onto the internet was proving to be quite the headache.\r\n\r\nMost of the guides online showed how to deploy rails applications using [Capistrano](https://github.com/capistrano/capistrano) which seems like a great idea--for a real website. I, however am not looking to build a *real* website, just a a blog for my own edification. If you find yourself in a similar situation, don't sweat. Ill show you how it's done, sort of.\r\n\r\n## Some assumptions\r\n\r\nSince this post is about deploying a rails app, I assume you have a rails app to use. If you just want to try this out but don't have a finished project install ruby and rails via this [guide](https://gorails.com/setup/ubuntu/14.10). But seriously, if you don't yet have rails installed you probably have some other things to read before this article. If you are in need of a sample app to follow along\r\n\r\n``\r\nrails new blog\r\ncd blog\r\nrails generate scaffold post title:string body:text\r\nrake db:migrate\r\n``\r\n\r\nThis will have just created a nearly complete, albeit boring, rails application. But, for our purposes, boring is good.\r\n\r\n\r\n\r\n\r\n\r\n# Steps to update\r\n- git pull\r\n- RAILS....asset precomple\r\n- RAILD asset clean\r\n- source ~/.bashrc\r\n- unicorn restart", author: nil, published: false, published_at: nil, pretext: "I wrote an application using the  Ruby on Rails web-framework to manage this blog. I am currently enrolled in a development bootcamp and based off of what we were covering, a barebones content management system seemed within reach. And it was. Writing he application was no sweat, but getting it onto the internet was proving to be quite the headache..."},
  {title: "Rename files with perl rename", body: "The typical unix way of renaming files is by using the ``mv`` command. While this combined with shell scripting provides all the power you need, it isn't always the easiest way to get the job done.  Enter the perl script, rename. Rename does what it promises, and it does it well. Perl is well known for the power its regular expressions. Rename allows one to harness this power with a single command.\r\n\r\nI can only speak for Homebrew for OSX and Ubuntu's Advanced Package Tool, but in those repositories the package to be installed is just called ``rename``.\r\n\r\nOSX:\r\n\r\n```term\r\n$ brew install rename\r\n```\r\n\r\nor Ubuntu:\r\n\r\n```term\r\n# apt-get install rename\r\n```\r\n\r\nThere are many ways to use ``rename`` and running\r\n\r\n```term\r\n$ man rename\r\n```\r\n\r\n is always a good idea for more authoritative, though sometimes cryptic, information. The way to use rename that I find most useful is by using its switch feature. Switching uses regular expressions to match patterns of text and replace those patterns with the following syntax.\r\n\r\n```term\r\n$ rename 's/<regular-expression>/<replacement-text/' * \r\n```\r\n\r\nThis above command would be applied to all files in the current working directory because of the ``*`` character. A simple example I have been using is to strip the extensions off of files would be\r\n\r\n```term\r\n$ rename 's/*\\.flac//' *\r\n```\r\nthis would turn\r\n\r\n```term\r\n  my_song.flac.mp3\r\n```\r\n\r\ninto\r\n\r\n```term\r\n  my_song.mp3\r\n```\r\nNote here that a backslash is used to escape the special meaning of the period which would normally be interpreted as a standing for any single character. Perl regular expressions are really powerful, you (and I) should [read up further](http://perldoc.perl.org/perlre.html) on their many uses .\r\n\r\nBesides all the possibilities of the regular expressions, there are many flags that can be used along with rename to make quick work of common tasks. For example\r\n\r\n```term\r\n$ rename -x *.mp3 \r\n```\r\n\r\ncould be used if all we wanted to do was to strip the 'mp3's off of the end.\r\n\r\nThats all for now, happy (re)naming.", author: nil, published: true, published_at: nil, pretext: "The typical unix way of renaming files is by using the mv command. While this combined with shell scripting provides all the power you need, it isn't always the easiest way to get the job done.  Enter the perl script, rename. Rename does what it promises, and it does it well..."},
  {title: "Unpack .tar.gz files from the command line", body: "# Enjoy\r\n\r\n```term\r\n$ tar -xzvf some_archive.tar.gz\r\n```\r\n\r\nOkay, hopefully I won't forget this now.", author: nil, published: true, published_at: nil, pretext: "Read on..."},
  {title: "Syntax highlighting", body: "### See that?\r\n\r\n```ruby\r\ndef some_code\r\n  3.times do \r\n    puts \"hello\"\r\n  end\r\nend\r\n```\r\n&nbsp;\r\n*Much better.*\r\n\r\nThis is made possible with the help of [red-carpet](https://github.com/vmg/redcarpet) and [coderay](https://github.com/rubychan/coderay).\r\nCreating my own blogging application had at one point seemed like a fairly straight-forward task. Maybe this was true, but I completely underestimated the amount of effort that would be required to produce a functional, better-than-embarassing website. The hard parts were all the things I take for granted on a well built site. For example, I got all the way to deployment before I realized I had no way of deleting posts--oops. Before that, i realized another issue was the ability to format bodies of text.\r\n\r\nI came to this realization when i tried to type out my first real post. Up until now, my testing had not taken into account the format of the post bodies, just their respective CRUD actions. What I found out is that , by default, rails will just return the literal string typed into my new post form. Efforts to write my posts in html were short-lived for two reasons:\r\n\r\n1) Writing articles in HTML is awful\r\n2) Rails still renders HTML as literal strings (by default)\r\n\r\nI discovered that rails could indeed render my html by adding .html_safe to my text output, but this still stinks because of reason no. 1.\r\n\r\n### Markdown to the rescue\r\n\r\nYou can get a little taste of what this looks like before red-capet and coderay get ahold of things by checking out the preview for this post on the [posts](/posts) page. I don't have the article pretext set for anything special, so those are the literal strings I was talking about. Notice how you don't even get newline characters.", author: nil, published: true, published_at: nil, pretext: "```ruby\r\ndef some_code\r\n  3.times do \r\n    puts \"hello\"\r\n  end\r\nend\r\n```"},
  {title: "Greetings from the terminal", body: "*I used to think  computers weren't for me. I was curious about how they worked, but they seemed mysterious and inaccessible. I attribute much of this to my having grown up in the 90's when Windows  was king (I'd only ever used a Windows machine until college) and Linux was far from mainstream. About two years ago, I bought a budget laptop loaded with the then latest and greatest Windows 8. Ill spare you the details, but lets just say the laptop was a bit of a disappointment. Having given up hope of the thing ever becoming useful I decided to give this Linux thing a try...*\r\n\r\n### Ubuntu, ubuntwho? \r\n\r\nMy experiment was a success. A raging success at that. Suddenly my crapbook was quick and stable. The touch screen and trackpad even worked better (**warning** haven subsequently installed several different Linux distros on several different machines, all I can say is that your success will vary). It is at this point that I begin talking the ears off of anyone I can find about how they need to get some Linux on their hard drives ASAP. I am not in sales, nor should I ever be. Despite my most impassioned pleas, only one person has yet to take me up on my suggestion.\r\n\r\n### Whats with all the sudo apt-get\r\n\r\nIf you have used a Linux machine for any length of time, you know that issuing commands via the terminal is a big part of getting things done. Realizing this, I turned my attention towards learning more about this magic black window.\r\n\r\nI am currently enrolled in a [development bootcamp](http://anyonecanlearntocode.com/) and its making me glad I started playing around with the command line in advance. Trying to learn web development can be overwhelming enough, not being comfortable with ones development machine can make the experience downright punishing (like when I decided to switch to vim three weeks into the bootcamp). I am going to create a series of posts touching on my favorite command line tricks and tips to help some earlier version of me (before i knew about tab completion) or you be more productive.\r\n\r\n*I talked about Linux a lot here, but don't worry if you are on a mac this stuff is all the same. If you are on windows, consider installing Linux or don't expect this to be helpful;)*\r\n\r\n### Tab completion\r\n\r\nI mentioned it in the last paragraph so I decided to start off with it. Bash (the program interpreting  your commands) will help guess the name of a file when you press tab, if you have given bash enough characters for there to be only one possible match. If you haven't given bash enough characters, bash will complain with a bell, but if you hit tab a second time a list of possible matches will appear. This feature is extremely helpful with long file names, or filenames which contain spaces (boo-hiss). The tab completion feature can also serve as a little bit of a spell checker for the rest of your command since it will only work if bash thinks everything else makes sense.\r\n\r\n### History\r\n\r\nYou may know about the up arrow giving you access to a list of your previous commands, but bash also keeps a record of recent commands. You may access these commands with the command\r\n``` \r\n$ history \r\n```\r\n*...more coming soon*", author: nil, published: true, published_at: nil, pretext: "I used to think  computers weren't for me. I was curious about how they worked, but they seemed mysterious and inaccessible. I attribute much of this to my having grown up in the 90's when Windows  was king (I'd only ever used a Windows machine until college) and Linux was far from mainstream. About two years ago, I bought a budget laptop loaded with the then latest and greatest Windows 8. Ill spare you the details, but lets just say the laptop was a bit of a disappointment. Having given up hope of the thing ever becoming useful I decided to give this Linux thing a try...\r\n"},
  {title: "Command Line Episode 0 - Directories", body: "This is the first post in a series regarding a practical introduction to the unix command line. If you don't know what unix or unix based is, thats for another article. Just think, unix anything that's not Windows and you will be correct 99% of the time. Okay, time to poke some directories.\r\n\r\nAfter you open up a terminal (don't know [how to](https://www.google.com/search?q=open+terminal&oq=open+terminal&aqs=chrome.0.69i59j69i60.2279j0j1&sourceid=chrome&es_sm=91&ie=UTF-8) open a terminal) this is a good first command. Type everything after the $\r\n\r\n```term\r\n $ ls\r\n```\r\n\r\nShould give some output like\r\n\r\n```term\r\n Documents  Music      Videos\r\n Downloads  Pictures   somefile.txt\r\n```\r\n\r\nThe ``ls`` command lists the contents of your current (working) directory. Its output will vary depending on your system and the working directory.\r\n\r\nNext command. Print the working directory\r\n\r\n```term\r\n $ pwd\r\n```\r\n\r\nwill give\r\n\r\n```term \r\n/home/al\r\n```\r\n\r\nif you are logged in with username \"al\".\r\nOr\r\n\r\n```term\r\n/Users/al\r\n```\r\n\r\nif this user named \"al\" is using a mac.\r\n### *Beak*\r\nwe can now...\r\n1) list the contents of our working directory\r\n2) see where our working directory is in the directory tree\r\n### *Onward*\r\n\r\nnow lets change directory to the top (or bottom) of the directory tree\r\n\r\n```term\r\n $ cd /\r\n```\r\n\r\nwill not give you any output, but you may notice your prompt (the part before where you type commands) has changed.\r\nThe ``cd`` command changes working directories and \"/\" is the representation of a special directory. This special directory the one  containing all of the other directories and files. It's called the root directory in when written in English, but just / when you're talking to the computer.\r\n\r\ntime for another\r\n\r\n```term\r\n $ ls\r\n```\r\n\r\nwhich, on my machine gives\r\n\r\n```term\r\nbin   dev  home        initrd.img.old  lib64       media  opt   root  sbin  sys  usr  vmlinuz\r\nboot  etc  initrd.img  lib             lost+found  mnt    proc  run   srv   tmp  var\r\n```\r\n\r\nOur outputs may not be identical, but you should see some of the same directories listed in your's (assuming the you are following along).\r\n\r\nOne last thing.\r\n\r\n```term\r\n $ ls /home\r\n```\r\n\r\nwill list contents of the home directory. I wrote this to illustrate the point that often times, commands are combined together with filenames or other \"arguments.\" Arguments is a general term for any  sort of input parameters you give to a function. In this case ``ls`` is the function and ``home`` is the only argument.\r\nIf you have followed along with these commands \r\n\r\n```term\r\n $ ls home\r\n```\r\n \r\nwill give the same result as ``/home`` because in this case, the / is redundant because of something called a relative path. A file or directory's relative path is its path with respect to the current working directory. If this isn't clear, just remember: **Relative pathnames do not begin with /, absolute pathnames do begin with /**. Its really that simple.\r\n\r\n*Next up... Files*", author: nil, published: true, published_at: nil, pretext: "This is the first post in a series regarding a practical introduction to the unix command line. If you don't know what unix or unix based is, thats for another article. Just think, unix anything that's not Windows and you will be correct 99% of the time. Time to poke some directories."},
  {title: "List of ideas for future posts", body: "Compression zipping archiving and stuff like that in unix\r\n", author: nil, published: false, published_at: nil, pretext: "See full list"},
  {title: "Command Line Episode 1: Everythimg is a file", body: "Let's touch our first file.\r\n\r\n```term\r\n $ touch new_file\r\n```\r\n\r\nThe touch is pretty basic and only is able to do two things. The file being 'touched' does not exist, then touch creates a new, empty file with the name it was given. The second thing touch can do is update the timestamp of a file or directory.\r\n\r\nTo see touch in action, we will need a different version of the ``ls`` command from the directories article. Run\r\n\r\n```term\r\n $ ls -l\r\n```\r\n\r\n\r\n============\r\nRead files with cat and less\r\nEcho to files with > and >>\r\nTouch file", author: nil, published: false, published_at: nil, pretext: "Following up the last post on directories, here we will  look at creating, reading,  moving and deleting unix files."},
  {title: "Linux Home Server", body: "Some steps I have taken in my quest for the worlds greatest bedroom closet server. I plan to expand this overview into a series of tutorials, but for now...\r\n\r\n## Step 1\r\n### The Hardware\r\n\r\nEbay is currently littered with newly retired production servers going for pennies on the dollar. I had considered something like a Dell 2950 poweredge until I measured my closet. I realized that there wasn't much piratical way to fit this monster in my closet, and everything the internet had to say about these things is that they are loud as a jet. I haven't heard one in person but I also couldn't find  anyone saying \"oh don't worry, the noise isn't that bad.\"\r\n\r\nScratching my head as to what to do I stumbled across another pot of ebay gold. The Dell precision Tx500 series workstations.\r\n \r\n![T5500 tower pc](http://i.ebayimg.com/00/s/MjI1WDIyNQ==/z/CcIAAOSwq7JUJHd9/$_35.JPG?set_id=2)\r\n\r\n[This website](http://processors.specout.com/d/p/LGA-.-1366) has a ranking of all of the processors which fit this Dell's LGA-1366 socket. This will help you sort through the specifications in the listings. Personal suggestion is to go for a machine without a Windows license included as they tend to run 40-60 dollars less and you won't be needing one for this project. Be sure you get a processor with support for hardware virtualization.  You should be able to get a pretty awesome computer for under $ 150 -- I did.\r\n\r\n## Step 2\r\n### Gather the goods\r\n\r\nOnce the deed is done and you have your new-to-you ready to go gather these three things:\r\n1) A copy of Ubuntu server 14.04 (you can use something else, but this is what I am using) on DVD or flash-drive\r\n2) An ethernet connection (permanent)\r\n3) Any monitor and keyboard (temporary)\r\n\r\n## Step 3\r\n### Instal an OS\r\n\r\nBefore installing Ubuntu, boot to the system bios and find the option for your processor's virtualization extension and enable it. Then reboot and install your operating system. If you are using Ubuntu server follow the onscreen instructions for installation using the keyboard and mouse. This should be pretty simple, just make sure to select installation of open-ssh at the software installation screen (you could also select to install the virtualization host software here too, but I'm going to cover that next). Test that everything worked well by logging into the server via ssh. If this works, then you can go ahead and pull the monitor and keyboard.\r\n\r\n## Step 4\r\n### Install some more OSs\r\n\r\nI used to operate my home server as just a single monolithic operating system. This was appropriate when I was using a raspberry pi as the hardware, but now with this xeon powered workstation I can afford some extra ram in the name of keeping things organized and sensible. The way I go about this is by using the virtual servers to host different processes which may otherwise have conflicting configurations. After following directions to install KVM and ubuntu-vm-builder here is an example of a recipe I used to have the builder install a VM to act as my reverse-proxy server. This will take a while.\r\n\r\n```term\r\n  # ubuntu-vm-builder kvm ubuntu \\\r\n  --suite trusty \\\r\n  --flavour virtual \\\r\n  --destdir vm_reverse_proxy_server \\\r\n  --rootsize 10000 \\\r\n  --domain ilseman.com \\\r\n  --user al --name al --pass password \\\r\n  --addpkg acpid --addpkg openssh-server --addpkg linux-image-generic \\\r\n  --components main,universe,restricted \\\r\n  --arch amd64 \\\r\n  --hostname vmRPS \\\r\n  --libvirt qemu:///system \\\r\n  --bridge br0 \\\r\n  --mem 1024 --cpus 1 ;\r\n```\r\n\r\nHere the libvert option allows us to be able to manage our newly created virtual machine using virsh.\r\n\r\n```term\r\n  # virsh\r\n```\r\n\r\nWill log you into the virtual machine management console where you can run\r\n\r\n```term\r\n  virsh # list --all\r\n```\r\n\r\nTo view your newly created virtual machine and\r\n\r\n```term\r\n  virsh # start <name_of_vm>\r\n```\r\n\r\nAlternatively you can pass commands directly to virsh without logging into the console. If you want your VM to start automatically on boot you could run\r\n\r\n```term\r\n  # virsh autostart <name_of_vm>\r\n```\r\n\r\nfrom the regular system shell.\r\n\r\n## Wrap-up\r\n\r\nSo now you have a server that does nothing but host other virtual servers. Excited? If you are still reading this than you must be. In that case, stay tuned for more. Next I will be covering nginx configurations for being able host multiple domains from a single IP address.\r\n\r\n", author: nil, published: true, published_at: nil, pretext: "Ebay is currently littered with newly retired production servers going for pennies on the dollar. I had considered something like a Dell 2950 poweredge until I measured my closet. I realized that there wasn't much piratical way to fit this monster in my closet, and everything the internet had to say about these things is that they are loud as a jet. I haven't heard one in person but I also couldn't find  anyone saying \"oh don't worry, the noise isn't that bad.\""},
  {title: "Installing node(js) on Ubuntu 15.10", body: "## Basic steps\r\n- uninstall previous versions of node\r\n\r\n```term\r\n  $ sudo apt-get remove --purge nodejs\r\n```\r\n\r\n- download latest source code\r\n\r\n```term\r\n  wget https://nodejs.org/dist/v5.5.0/node-v5.5.0.tar.gz \r\n  tar -xvf node-v5.5.0.tar.gz\r\n  cd node-v5.5.0.tar.gz\r\n  ./configure\r\n  make -j4     // four core processor\r\n  sudo make install\r\n```", author: nil, published: false, published_at: nil, pretext: ""},
  {title: "Dynamic SSH Proxies", body: "## Why do you want to do this?\r\nI looked this up a while ago when I was selling a car on craigslist. Had several difference times when I wanted to adjust the listing from work, but my company had blacklisted craigslist.org, not really sure why.\r\nI just came on a second circumstance where I need to be on my home network. I am riding along on a road trip and have the need to log into my router.\r\n\r\n## How do we do  this\r\nThere are two things to do to get this working connect to the server\r\n\r\n```term\r\n $ ssh -CND 8080 some_login@some_server.com\r\n```\r\n\r\nExplain how to make an alias to chrome for mac or `google-chrome` for linux\r\n\r\n```term\r\n $ chrome --args --proxy-server=socks4://localhost:8080\r\n```", author: nil, published: false, published_at: nil, pretext: "Browse the web from your home network while you are away using ssh/socks proxy!"},
  {title: "Install Ruby 2.3.0 and Rails 4.2.5.2 on Fedora 23", body: "## Install rbenv\r\nQuite simple here just head over to [rbvenv's github page](https://github.com/rbenv/rbenv) for the full list of options, but it basically boils down to this.\r\n\r\n#### Clone the repo\r\n```term\r\n $ git clone https://github.com/rbenv/rbenv.git ~/.rbenv\r\n```\r\nThis will put the rbenv folder in your home directory, so make sure you don't run this as root.\r\n\r\n#### Compile the executable\r\n```term\r\n $ cd ~/.rbenv && src/configure && make -C src\r\n```\r\n\r\n#### Add the executable to $PATH\r\n```term\r\n $ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bash_profile\r\n```\r\n\r\n#### Make sure rbenv starts when you login\r\n```term\r\n $ echo 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\r\n $ source ~/.bash_profile\r\n```\r\n*Take care if not using bash*\r\n\r\n## Install rbenv plugins to make everything better\r\n\r\n#### Install ruby-build for rbenv\r\n```term\r\n $ git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\r\n```\r\n\r\n#### Install rbenv rehash\r\n```term\r\n $ git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash\r\n```\r\n\r\n## Install Ruby\r\nSince we are using rbenv and ruby-build, this will be relativity easy. However, we still need some additional system dependencies so we need to install some packages with `dnf` first. Then we can install the Ruby. This may take a minute or two.\r\n\r\n```term\r\n $ sudo dnf install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel readline-devel\r\n $ rbenv install 2.3.0\r\n```\r\n#### Install Node.js\r\n```term\r\n $ sudo dnf install\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", author: nil, published: false, published_at: nil, pretext: ""}
])
